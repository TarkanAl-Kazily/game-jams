pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- space controller v1_8
-- by tarkan al-kazily

#include objects.lua
#include controls.lua
#include draw.lua


_delta_t = 1.0 / 60.0
time = 0.0
last_game_over_check = 0.0
max_time = -1
score = 0
total_score = 0
miner_count = 1
ship_cost = 100
entities = {}
game_entities = {}
player_camera = {type="meta", state={q={x=64, y=64}}, radius=1}
player_menu = {entries={"max speed", "max thrust", "max turning", "throttle gain", "counter overshoot", "aim straight", "counter orbiting"}, menu_item=-1, action_select=1, actions={"clear", "scatter", "search"}}
camera_pos = {x=0, y=0}
world_bounds = {min={x=-128, y=-128}, max={x=255, y=255}}
background = nil
zones = nil
seed_background = 42
seed_zones = 48
game_over = false

title = {active=true, menu_item=1, menu_items={"endless", "timed", "fixed ships", "instructions"}, tutorial_screen=0, num_tutorial_screens=5}

upgrade_costs = {0, 25, 25, 25}

-- valid modes: ship, manager, menu
player_mode = "manager"

function _init()
  music(5, 0, 7)
  last_time_pts_sfx = time
  background = generate_background()
  game_entities = generate_zones()
  z1 = new_zone()
  z1.state.q = {x = 22, y = 18, d = 0}
  z1.color = 5
  z1.radius = 5
  z1.point_growth = 4.0
  z1.point_cap = 50
  z2 = new_zone()
  z2.state.q = {x = 100, y = 64, d = 0}
  z2.color = 13
  z2.radius = 15
  z2.point_growth = 3.0
  z2.point_cap = 100
  miner_targets = {z1, z2}
  add(entities, z1)
  add(entities, z2)
  add(entities, new_miner())
end

function init_endless()
  --music(3, 0, 7)
  miner_targets={}
  time = 0
  entities = game_entities
  miner = new_miner()
  miner.state.q = {x=50, y=50, d=0}
  add(entities, miner)
  title.active = false
end

function init_timed()
  --music(3, 0, 7)
  miner_targets={}
  time = 0
  entities = game_entities
  max_time = 60 * 3

  miner = new_miner()
  miner.state.q = {x=50, y=50, d=0}
  add(entities, miner)
  title.active = false
end

function init_fixed_ships()
  --music(3, 0, 7)
  miner_targets={}
  time = 0
  entities = game_entities
  for i=1,10 do
    add(entities, new_miner())
  end
  miner_count = 10
  upgrade_costs[1] = -1
  title.active = false
end

function _update60()
  if title.active then
    update_title()
    update_entities()
    time += _delta_t
  elseif not game_over then
    update_player()
    update_ship_cost()
    if player_mode != "menu" then
      time += _delta_t
      update_entities()

      if rnd(100) < 0.5 then
        add(entities, new_moving_zone())
      end
    end
    check_game_over()
  else
      time += _delta_t
      if btn() > 0 and time - last_game_over_check > 5 then
        extcmd("reset")
      end
  end
end

function check_game_over()
  last_game_over_check = time
  if upgrade_costs[1] < 0 then
    game_over = (miner_count <= 0)
  elseif max_time > 0 then
    game_over = (time >= max_time)
  else
    game_over = false
  end

  if game_over then
    player_mode = "ship"
  end
end

function control_camera()
  if btn(0) then
    player_camera.state.q.x -= 1
  end
  if btn(1) then
    player_camera.state.q.x += 1
  end
  if btn(2) then
    player_camera.state.q.y -= 1
  end
  if btn(3) then
    player_camera.state.q.y += 1
  end

  player_camera.state.q.x = mid(world_bounds.min.x, player_camera.state.q.x, world_bounds.max.x - 1)
  player_camera.state.q.y = mid(world_bounds.min.y, player_camera.state.q.y, world_bounds.max.y - 1)

  camera_pos.x = mid(world_bounds.min.x, player_camera.state.q.x - 64, world_bounds.max.x - 128)
  camera_pos.y = mid(world_bounds.min.y, player_camera.state.q.y - 64, world_bounds.max.y - 128)
end

function _draw()
  cls()

  draw_background()
  if title.active then
    for i=1,#entities do
      local e = entities[i]
      if e.type == "zone" then
        draw_entity(e)
      end
    end

    for i=1,#entities do
      local e = entities[i]
      if e.type != "zone" then
        draw_entity(e)
      end
    end

    draw_title()
  else

    camera(camera_pos.x, camera_pos.y)
    if player_mode == "menu" then
      draw_menu()
    else

      -- the cookie
      for i=1,#entities do
        local e = entities[i]
        if e.type == "zone" then
          draw_entity(e)
        end
      end

      if player_mode == "manager" or player_mode == "ship" then
        draw_miner_path()
      end

      for i=1,#entities do
        local e = entities[i]
        if e.type != "zone" then
          draw_entity(e)
        end
      end

      local top_x, top_y = camera_pos.x, camera_pos.y
      -- score box
      msg = "ships: "..miner_count
      rectfill(top_x, top_y, top_x + 4 + 4 * #msg, top_y + 10, 0)
      rect(top_x, top_y, top_x + 4 + 4 * #msg, top_y + 10, 1)
      print(msg, top_x + 3, top_y+ 3, 8)

      -- total score box
      local total_score_pos = 64
      msg = tostr(flr(total_score))
      box_width = 24
      rectfill(top_x + total_score_pos - box_width / 2, top_y, top_x + total_score_pos + box_width / 2, top_y + 10, 0)
      rect(top_x + total_score_pos - box_width / 2, top_y, top_x + total_score_pos + box_width / 2, top_y + 10, 1)
      print(msg, top_x + total_score_pos - (4 * #msg) / 2.0 + 1, top_y + 3, 8)

      -- timer box
      local t = (game_over and last_game_over_check) or time
      local m, s = flr(t / 60), flr(t % 60)
      msg = m..":"..s
      if s < 10 then
        msg = m..":0"..s
      end
      rectfill(top_x + 127, top_y, top_x + 123 - 4 * #msg, top_y + 10, 0)
      rect(top_x + 127, top_y, top_x + 123 - 4 * #msg, top_y + 10, 1)
      print(msg, top_x + 126 - 4 * #msg, top_y+ 3, 8)

      if player_mode == "manager" then
        line(player_camera.state.q.x - 4, player_camera.state.q.y, player_camera.state.q.x + 4, player_camera.state.q.y, 8)
        line(player_camera.state.q.x, player_camera.state.q.y - 4, player_camera.state.q.x, player_camera.state.q.y + 4, 8)
      end
      line(-128, -128, -128, 254, 1)
      line(254, 254)
      line(254, -128)
      line(-128, -128)
    end
  end

  if game_over then
    local top_x, top_y = camera_pos.x + 64, camera_pos.y + 48
    local msg = "game over"
    print(msg, top_x - 2 * #msg, top_y, 7)
    
    top_y += 16
    if time - last_game_over_check > 3 then
    msg = "press any button to restart"
    print(msg, top_x - 2 * #msg, top_y, (flr(time * 4) % 2 == 0 and 5 or 7))
    end
  end
end

-->8
-- update code

-- moves the camera to try and center the player
function update_camera()
  local dx, dy = player.state.q.x - camera_pos.x, player.state.q.y - camera_pos.y
  if dx < 32 then
    camera_pos.x -= 2.0
  elseif dx > 95 then
    camera_pos.x += 2.0
  end

  if dy < 32 then
    camera_pos.y -= 1.0
  elseif dy > 95 then
    camera_pos.y += 1.0
  end

  camera_pos.x = mid(world_bounds.min.x, camera_pos.x, world_bounds.max.x - 128)
  camera_pos.y = mid(world_bounds.min.y, camera_pos.y, world_bounds.max.y - 128)
end


-- updates all entities
-- applies movement physics
function update_entities()
  foreach(entities, update_entity)
end

-- updates an entity
-- applies movement physics
function update_entity(e)
  update_state(e.state, e.control, e.limits, _delta_t)
  if out_of_bounds(e) then
    if e.type == "miner" or e.type == "player" then
      miner_count -= 1
    		sfx(2, 3)
    end

    if e.type == "player" then
      player_camera.state.q.x = camera_pos.x + 64
      player_camera.state.q.y = camera_pos.y + 64
      switch_from_ship()
      player_mode = "manager"
    end
    del(entities, e)
    del(miner_targets, e)
  end

  if e.type == "miner" then
    update_miner_control(e)
  end

  if e.type == "zone" then
    update_zone(e)
  end

  if (e.type == "player" or e.type == "miner") then
    update_points(e)
  end
end


function update_zone(zone)
  for i=1,#entities do
    local e = entities[i]
    if (e.type == "miner" or e.type == "player") and overlap(e, zone) then
      return
    end
  end
  zone.point = min(zone.point_cap, zone.point + zone.point_growth * _delta_t)
end

function update_points(ship)
  for i=1,#entities do
    e = entities[i]
    if (e.type == "zone") and overlap(e, ship) then
      local pts = flr(e.point)
      if pts > 0 and time - last_time_pts_sfx > 0.1 then
        sfx(0, 3)
        last_time_pts_sfx = time
      end
      if not title.active then
        score += min(pts, 1)
        total_score += min(pts, 1)
      end
      e.point -= min(pts, 1)
    end
  end
end

-->8
-- player code

function update_title()
  if title.tutorial_screen == 0 then
    if btnp(2) then
      title.menu_item -= 1
    end
    if btnp(3) then
      title.menu_item += 1
    end
    if btnp(4) or btnp(5) then
      -- activate game
      if title.menu_item == 1 then
        -- endless
        init_endless()
        title.active = false
      elseif title.menu_item == 2 then
        -- timed
        init_timed()
        title.active = false
      elseif title.menu_item == 3 then
        -- fixed ships
        init_fixed_ships()
        title.active = false
      elseif title.menu_item == 4 then
        -- tutorial
        title.tutorial_screen = 1
      end
    end

    title.menu_item = mid(1, title.menu_item, #title.menu_items)
  else
    if btnp(4) or btnp(5) then
      title.tutorial_screen += 1
    end

    if title.tutorial_screen == 4 then
      title.tutorial_screen = 0
    end
  end
end

function update_player()
  if player_mode == "ship" then
    update_player_control()
    update_camera()
    if btnp(5) then
      player_camera.state.q.x = camera_pos.x + 64
      player_camera.state.q.y = camera_pos.y + 64
      switch_from_ship()
      player_mode = "manager"
    end
  elseif player_mode == "manager" then
    control_camera()
    if btnp(5) then
      if switch_to_ship() then
        player_mode = "ship"
      elseif not modify_miner_path() then
      end
    elseif btnp(4) then
      player_mode = "menu"
    end
  elseif player_mode == "menu" then
    update_player_menu()
    if btnp(4) then
      player_mode = "manager"
    end
  end
end

-- update player
-- enables forward, left, and right
function update_player_control()
  if btn(0) then
    player.control.angular_velocity = 10.0
  end

  if btn(1) then
    player.control.angular_velocity = -10.0
  end

  if not (btn(0) or btn(1)) then
    player.control.angular_velocity = 0.0
  end

  if btn(2) then
    player.control.acceleration = 100.0
  else
    player.control.acceleration = 0.0
  end

  player.control.angular_velocity = mid(player.control.angular_velocity, miner_settings.max_angular_velocity, -miner_settings.max_angular_velocity)
  player.control.acceleration = mid(player.control.acceleration, miner_settings.max_acceleration, -miner_settings.max_acceleration)
end

function update_ship_cost()
  if upgrade_costs[1] >= 0 then
    ship_cost = miner_count * 100
    upgrade_costs[1] = ship_cost
  end
end

function update_player_menu()
  local values = {miner_settings.max_velocity, miner_settings.max_acceleration, miner_settings.max_angular_velocity, miner_settings.kp_1, miner_settings.kd_1, miner_settings.kp_2, miner_settings.kd_2}
  local max_values = {upgrade_maximums.max_velocity, upgrade_maximums.max_acceleration, upgrade_maximums.max_angular_velocity, upgrade_maximums.kp_1, upgrade_maximums.kd_1, upgrade_maximums.kp_2, upgrade_maximums.kd_2}
  if btnp(2) then
    player_menu.menu_item -= 1
    if player_menu.menu_item == 1 then
      player_menu.menu_item = 0
    end
  end

  if btnp(3) then
    player_menu.menu_item += 1
    if player_menu.menu_item == 1 then
      player_menu.menu_item = 2
    end
  end
  player_menu.menu_item = mid(-1, player_menu.menu_item, #player_menu.entries)


  if btnp(5) then
    if player_menu.menu_item < 0 then
      if player_menu.action_select == 1 then
        miner_targets = {}
      end

      if player_menu.action_select == 2 then
        miners_scatter()
      end

    elseif player_menu.menu_item < #upgrade_costs then
      if score > upgrade_costs[player_menu.menu_item+1] then
        if player_menu.menu_item == 0 then
          if miner_count < 10 and upgrade_costs[1] >= 0 then
            score -= upgrade_costs[player_menu.menu_item+1]
            add(entities, new_miner())
            miner_count += 1
          end
        else
          score -= upgrade_costs[player_menu.menu_item+1]
          max_values[1] += upgrade_amounts[1]
          max_values[player_menu.menu_item] += upgrade_amounts[player_menu.menu_item]
          upgrade_costs[player_menu.menu_item+1] += 25
        end
      end
    end
  end

  if player_menu.menu_item == -1 and btnp(0) then
    player_menu.action_select -= 1
    if player_menu.action_select == 0 then
      player_menu.action_select = 2
    end
  end
  if player_menu.menu_item == -1 and btnp(1) then
    player_menu.action_select = player_menu.action_select % 2 + 1
  end



  if player_menu.menu_item > 0 and btn(0) then
    values[player_menu.menu_item] -= 0.01 * max_values[player_menu.menu_item]
  end

  if player_menu.menu_item > 0 and btn(1) then
    values[player_menu.menu_item] += 0.01 * max_values[player_menu.menu_item]
  end

  miner_settings.max_velocity = max_values[1]
  miner_settings.max_acceleration = max_values[2]
  miner_settings.max_angular_velocity = max_values[3]
  miner_settings.kp_1 = mid(0, values[4], max_values[4])
  miner_settings.kd_1 = mid(0, values[5], max_values[5])
  miner_settings.kp_2 = mid(0, values[6], max_values[6])
  miner_settings.kd_2 = mid(0, values[7], max_values[7])

  upgrade_maximums.max_velocity = max_values[1]
  upgrade_maximums.max_acceleration = max_values[2]
  upgrade_maximums.max_angular_velocity = max_values[3]
  upgrade_maximums.kp_1 = max_values[4]
  upgrade_maximums.kd_1 = max_values[5]
  upgrade_maximums.kp_1 = max_values[6]
  upgrade_maximums.kd_2 = max_values[7]
end

-->8
-- utils and math

-- special euclidean transformation on a point
-- rotated first, then translated
function se2(point, state)
  local result, dx, dy, dd = {x=0, y=0}, state.x, state.y, state.d
  result.x = point.x * cos(dd) - point.y * sin(dd)
  result.y = point.x * sin(dd) + point.y * cos(dd)
  result.x += dx
  result.y += dy
  return result
end

function overlap(e1, e2)
  local dx, dy = e1.state.q.x - e2.state.q.x, e1.state.q.y - e2.state.q.y
  local sum_radius = e1.radius + e2.radius
  if abs(dx) > sum_radius or abs(dy) > sum_radius then
    return false
  end
  local dist = dx * dx + dy * dy
  return dist < sum_radius * sum_radius
end

function out_of_bounds(e)
  return (e.state.q.x < world_bounds.min.x - e.radius) or (e.state.q.y < world_bounds.min.y - e.radius) or (e.state.q.x > world_bounds.max.x + e.radius) or (e.state.q.y > world_bounds.max.y + e.radius)
end

function distance_squared(p1, p2)
  local dx, dy = p1.x - p2.x, p1.y - p2.y
  if (dx * dx + dy * dy) < 0 then
    return 10000.0
  end
  return dx * dx + dy * dy
end

function rnd_between(small, large)
  return rnd(large - small) + small
end

function sign(val)
  return (val < 0) and -1 or 1
end

function draw_polygon(points, c)
  line(points[1].x, points[1].y, points[2].x, points[2].y, c)
  for i=3, #points do
    line(points[i].x, points[i].y)
  end
  line(points[1].x, points[1].y)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
11111111111111111111111111111111111110000000000000001111111111111111111111111000000000000000000000000000000111111111111111111111
10000000000000000000000000000000000010000000000000001000000000000000000000001000000000000000000000000000000100000000000000000001
10000000000000000000000000000000000010000000000000001000000000000000000000001000000000000000000000000000000100000000000000000001
10008808080888088800880000000008880010000000000000001000080808880888088800001000000000000000000000000000000100808000008080808001
10080008080080080808000080000000080010000000000000001000080808080808080000001000000000000000000000000000000100808008008080808001
10088808880080088808880000000000080010000000000000001000088808080888088800001000000000000000000000000000000100888000008880888001
10000808080080080000080080000000080010000000000000001000000808080808000800001000000000000000000000000000000100008008000080008001
10088008080888080008800000000000080010000000000000001000000808880888088800001000000000000000000000000000000100008000000080008001
10000000000000000000000000000000000010000000000000001000000000000000000000001000000000000000000000000000000100000000000000000001
10000000000000000000000000000000000010000000000000001000000000000000000000001000000000000000000000000000000100000000000000000001
11111111111111111111111111111111111110000000000000001111111111111111111111111000000000000000000000000000000111111111111111111111
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000
00000000000000000000000009990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000ddddddd000000e0000000000000000000000000000000000000000000000000000
0000000000000000a000000000000000000000000000000000000000000ddddddddddddd00e77700000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000dddddddddddddddddee7000e07000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000ddddddddddddddddded0ee0e777000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000ddddddddddddddddddeee000ee77e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000ddddddddddddddddddeeddd00e0eee00000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000ddddddddddddddddddddddddd0eeee000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000ddddddddddddddddddddddddddeeee0000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000dddddddddddddddddddddddddde0e00000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000ddddddddddddddddddddddddddddd000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000ddddddddddddddddddddddddddddd000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000ddddddddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000ddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000
0000000e000000000000000000000000090900000000000000ddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000
00000007ee0000000000000000000000009990000000000000ddddddddddddddadadddddddddddddd00000000000000000000000000000000000000000000000
00000777e0ee00000000000000000000000900000000000000ddddddddddddddffddddddddddddddd00000000000000000000000000000000000000000000000
00000077e0eee0000000000000000000000000000000000000dddddddddddfffadadddddddddddddd00000000000000000000000000000000000000000000000
00000eeeee0000000000000000000000000000000000000000dddddddddffdddddfdddddddddddddd00000000000000000000000000000000000000000000000
000007eee00000000000000000000000000000000000000000ddddddfffddddddddfddddddddddddd00000000000000000000000000000000000000000000000
000777e00ee0000000000000000000000000000000000000000ddfffddddddddddddfddddddddddd000000000000000000000000000000000000000000000000
000077eee00000000000000000000000000000000000000000fffddddddddddddddddfdddddddddd000000000000000000000000000000000000000000000000
00000ee00000000000000000000000000000000000000000ff0ddddddddddddddddddfdddddddddd000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000fff0000ddddddddddddddddddfdddddddd0000000000000000000000000000000000000000000000000
000000000000000000000000040040000000000000fff0000000dddddddddddddddddddfddddddd0000000000000000000000000000000000000000000000000
0000000000000000000000400000000000000000ff00000000000ddddddddddddddddddfdddddd00000000000000000000000000000000000000000000000000
0000000000000000000000555550000000000fff00000000000000ddddddddddddddddddfdddd000000000000000000000000000000000000000000000000000
0000000000000000000005555555000000fff000000000000000000ddddddddddddddddddfdd0000000000000000000000000000000000000000000000000000
0000000000000000050055555555500fff0000000000000000000000ddddddddddddddddddf00000000000000000000000000000000000000000000000000000
00000000000000000005555555555ff00000000000000000000000000dddddddddddddddddf00000000000000003333333333300000000000000000000000000
00000000000000000005555a5afff500000000000000000000000000000ddddddddddddd000f0000000000033333333333333333330000000000000000000000
000000000000000000555555ff555500000000000000000000000000000000ddddddd0000000f000000003333333333333333333333300000000000000000000
00000000000000000005555a5aff5500500000000000000000000000000000000000000000000f00003333333333333333333333333333300000000000000000
0000000000000000000555555555fff0000000000000000000000000000000000000000000000f00033333333333333333333333333333330000000000000000
0000000000000000000555555555500fff00000000000000000000000000000000000000000000f3333333333333333333333333333333333300000000000000
000000000000000e000005555555005000ff0000000000000000000000000000000000000000003f333333333333333333333333333333333330000000000000
00000000000000ee00090055555000000000fff0000000000000000000000000800000000000033f333333333333333333333333333333333333000000000000
000000000000ee0e00000000004000000000000ff000000000000000000000008000000000003333f33333333333333333333333333333333333300000000000
90000000000eeee00000000000000000000000000fff0000000000000000000080000000000333333f3333333333333333333333333333333333330000000000
00000000000070e00000004000000000000000000000ff000000000000000000800000000033333333f333eeeeee333333333333333333333333333000000000
0000000000007770000000000000000000000000000000fff000000000008888888880000333333333f3333e33e7333333333333333333333333333300000000
0000000000007700000007000000000000000000000000000fff0000000000008000000033333333333f3333ee37733333333333333333333333333330000000
0000000000000000000000000000000000000000000000000000ff000000000080000003333333333333f3333e77733333333333333333333333333333000000
000000000000000000000000000000000000000000000000000000fff000000080000003333333333333f33333e3333333333333333333333333333333000000
000000000000000000000000000000000000000000000000000000000ff00000800000333333333333333f333333333333333333333333333333333333300000
00000000000000000000000000000000000000000000000000000000000fff000000033333333333333333f33333333333333333333333333333333333330000
00000000000000000000000000000000000000000000000000000000000000ff00000333333333333333333f3333333333333333333333333333333333330000
0000000000000000000000000000000000000000000000000000000000000000fff00333333333333333333f3333333333333333333333333333333333330000
0000000000000000000000000000000000000000000000000000000000000000000fff333333333333333333f333333333333333333333333333333333333000
0000000000000000000000000000000000000000000000000000000000000000000033ff33333333333333333f33333333333333333333333333333333333000
000000000000000000000000000000000000000000000000000000000000000000033333fff333333333333333f3333333333333333333333333333333333300
000000000000000000000000000000000000000000000000000000000000000000033333333ff3333333333333f3333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000003333333333fff33333333333f333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000003333333333333ff3333333333f33333333333333333333333333333333300
0000000000000000000000000000000000000000000000000000000000000000003333333333333333fff3333333f33333333333333333333333333333333330
0000000000000000000000000000000000000000000000000000000000000000003333333333333333333fff33333f3333333333333333333333333333333330
0000000000000000000000000000000000000000000000000000000000000000003333333333333333333333ff3333f333333333333333333333333333333330
000000000000000000000000000000000000000000000000000700000000000000333333333333333333333333fff33f33333333333333333333333333333330
000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333fff3a333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333ff3333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333a3a333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333333333330
00000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333333333333333300
00000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333333333333333333333000
00000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333333333333333333333000
00000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333330000
00000000000000000000000000000000000000000000000a00000000000000000000033333333333333333333333333333333333333333333333333333330000
00000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333333333330000
00000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333333333300000
00000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333333333333333000000
00000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333333333333333000000
00000000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333333333330000000
00000000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333333333300000000
00000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333333333000000000
00000000000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333333333330000000000
00000000000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333333333300000000000
05000504000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333333333333333333000000000000
00045000050000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333333333330000000000000
05000040000000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333333333300000000000000
ddddd000504050000000000000000000000000000000000000000000000000000000000000000000033333333333333333333333333333330000000000000000
dddddddd000500000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333333333300000000000000000
dddddddddd0000400000000000000000000000000000000000000000000000000000000000000000000003333333333333333333333300000000000000000000
ddddddddddd040050000000000000000000000000000000000000000000000000000000000000000000000033333333333333333330000000000000000000000
dddddddddddd00500000000000000000000000000000000000000000000000000000000000000000000000000003333333333300000000000000000000000000
ddddddddddddd0004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddd000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddddddddddddddd05000000000000000000000000000000000000000004004000000000000000000000000000000000000000000000000000000000000000000
ddddddddddddddd00040000000000000000000000000000000000000500550054000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd4000000000000000000000000000000000000004050400400000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd0550000000000000000000000000000000000000005555505050000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd0000000000000000000000000000000000000505055555554040000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd004000000000000000000000000000000000400555555555050000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd000000000000000000000000000000000000055555555555540500000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd055000000000000000000000000000000005005555555555504000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd000000000000000000000000000000000000405555555555557000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd404000000000000000000000000000000000055555555555504000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd000000000000000000000000000000000000405555555555505000000000000000000000000000000000000000000000000000000000000
ddddddddddddddddd050000000000000000000000000000000000540555555555500000000000000000000000000000000000000000000000000000000000000

__sfx__
0106000011516115162e5162e5162b516215061d50600506015062150623506005060050600506005060050600506005060050600506005060050600506005060050600506005060050600506000000000000000
0101000001610016100161001610016101d6001e60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0005000009630256502d6702e6702c670256701c65001640006200061001600006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000600002105021050210502105011050110501104011020110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012000200c7300c7200c7100c7150d7000c7000d700007000c7300c7200c7100c7150d7300d7200d7100d7150c7300c7200c7100c7150d7000c7000d700007000c7300c7200c7100c7150d7300d7200d7100d715
012000201875018740187300d0001d7501d7401d7300d0001b7501b700000000c0001a7501a7000c0000d00018750187201870019700197000d0000d000187000000000000000000000000000000000000000000
01200020187501874018730187201871000700007000d7001d7501d7401d7301d7201d71000700007000d7001b7501b720007000c7001a7501a7200c7000d70018750187401873018720187100d7000d70018700
012000002b7302b7202b710000000000000000000000000029730297202971024000277302772027710240002b7302b7202b71024000240002400024000240002973029720297102400027730277202771000000
012000202b7302b7202b7100070000700007000070000700297302972029710247002773027720277102470018730187201871024700247002470024700247002970029700297002470027700277002770000700
012000200c700006150c605000030c600000030c6000c5000c700006150c605000030c700006150c6050d7000c700006150c605000030d700000030d7000c7000c700006150c605000030c700006150c6050d700
012000200c700006150c6053051530515000030c6000c5000c700006150c605305150c700006150c6050d7000c700006150c6053051530515000030d7000c70030505006150c605305150c700006150c6050d700
012000202b7302b7202b71000000000000000000000000002e7302e7202e7002b7202b74029730297102400024730247202471024000240002400024000240001873018720187102400027700277002770000000
012000200c700006150c6053051530515000030c6000c5000c700006150c605305050c700006150c6050d7000c700006150c60530515305152e5152e5150c70030505006150c605305050c700006150c6050d700
__music__
01 06454344
03 06424344
03 06424344
00 06424344
00 060b4344
00 06424344
01 060c4344
00 06090c44
00 060a0c44
00 06090c44
02 060d0e44

