pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
-- you're the enemy
-- by tarkan al-kazily

#include agents_lib.lua

-- stores all the states
_s = {}
state="game"

-- global time
_t = 0

function _init()
  _s.game = agents_lib_init()
  p_hdl = agents_lib_create(_s.game,
    "player",
    {create_player, update_player, draw_mob},
    {ani={16, 17}, rate=15, times_acted=0},
    10)
end

function _update()
  _t += 1
  agents_lib_update(_s[state])
end

function _draw()
  cls()
  agents_lib_draw(_s[state])
end

-->8
--> entity code

--[[
 structure representing a mobile entity with an animation
 suggested entries in args:
 - x, y: initial position for entity
 - ani: sequence of frames for animation
]]
function create_mob(args)
  local ret = {
    x=0, y=0,
    ani={1}, frame=1, rate=0,
  }
  ret = merge_tables(ret, args)
  return ret
end

--[[
 structure representing player
]]
function create_player(args)
  local ret = create_mob(args)

  -- add additional state/functionality here
  ret._btnp = {}
  ret._btnp[0] = move_entity(0)
  ret._btnp[1] = move_entity(1)
  ret._btnp[2] = move_entity(2)
  ret._btnp[3] = move_entity(3)
  ret._btnp[4] = function() return {} end
  ret._btnp[5] = function() return {} end

  return ret
end

function update_player(a)
  -- handle button input
  local next_state = {x=a.x, y=a.y}
  local acted = false
  for i=0,5 do
    if (btnp(i)) then
      next_state = merge_tables(next_state, a._btnp[i](a))
    end
  end

  -- handle monster turn
  if next_state.x != a.x or next_state.y != a.y then
    acted = true
    a.times_acted += 1
  end
  a = merge_tables(a, next_state)
end

function draw_mob(a)
  if a.rate > 0 then
    a.frame = ((_t \ a.rate) % #a.ani) + 1
  end
  spr(a.ani[a.frame], a.x * 8, a.y * 8)
  print(a.times_acted)
end

function move_entity(dir)
  local dx = 0
  local dy = 0
  if (dir == 0) dx = -1
  if (dir == 1) dx = 1
  if (dir == 2) dy = -1
  if (dir == 3) dy = 1

  return function(a) 
    local ret = {x=mid(0, a.x + dx, 15), y=mid(0, a.y + dy, 15)}
    -- handle collision
    return ret
  end
end

-->8
-- util functions

function merge_tables(base, other)
  for k, v in pairs(other) do
    base[k] = v
  end
  return base
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22022022220220220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaa000000aaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2aa1aa0220aa1aa20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2aaaaa0220aaaaa20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aaaaa0000aaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20aaa002200aaa020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20000002200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02202220022022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
