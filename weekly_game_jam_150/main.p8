pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
-- you're the enemy
-- by tarkan al-kazily

#include agents_lib.lua

-- stores all the states
_s = {}
state="game"

-- stores all the enemies
enemies = {}

-- global time
_t = 0

function _init()
  _s.game = agents_lib_init()
  p_hdl = agents_lib_create(_s.game,
    "player",
    {create_player, update_player, draw_player},
    {ani={16, 17}, rate=15, pos={1, 1}},
    10)

  add(enemies, agents_lib_create(_s.game,
    "slime",
    {create_slime, update_slime, draw_mob},
    {pos={1, 2}},
    9))
  add(enemies, agents_lib_create(_s.game,
    "slime",
    {create_slime, update_slime, draw_mob},
    {pos={9, 9}},
    9))
  add(enemies, agents_lib_create(_s.game,
    "slime",
    {create_slime, update_slime, draw_mob},
    {pos={11, 11}},
    9))

  m_hdl = agents_lib_create(_s.game,
    "map",
    {create_map, update_map, draw_map},
    {},
    1)
end

function _update60()
  _t += 1
  agents_lib_update(_s[state])
end

function _draw()
  cls()
  agents_lib_draw(_s[state])
  --draw_distances(get_agent(p_hdl).pos)
end

function get_agent(hdl)
  return _s[state].agents[hdl]
end

function remove_agent(hdl)
  agents_lib_remove(_s[state], hdl)
end

-->8
--> entity code

-- datastructure to handle turns
_mobs = {head=0}

function active(a)
  if (#_mobs < 1) then
    return false
  end

  if (_mobs.head == 0) then
    _mobs.head = 1
  end

  return a.name == _mobs[_mobs.head].name
end

function pass(a)
  if not active(a) then
    return
  end

  _mobs.head = (_mobs.head % #_mobs) + 1
end

function remove_mob(a)
  del(_mobs, a)
end

--[[
 structure representing a mobile entity with an animation
 suggested entries in args:
 - x, y: initial position for entity
 - ani: sequence of frames for animation
]]
function create_mob(args)
  local ret = {
    pos={0, 0},
    ani={1}, frame=1, rate=0,
  }
  ret = merge_tables(ret, args)
  add(_mobs, ret)
  return ret
end

--[[
 structure representing player
]]
function create_player(args)
  local ret = create_mob(args)

  -- add additional state/functionality here
  ret._btnp = {}
  ret._btnp[0] = move_entity(0)
  ret._btnp[1] = move_entity(1)
  ret._btnp[2] = move_entity(2)
  ret._btnp[3] = move_entity(3)
  ret._btnp[4] = function() return {} end
  ret._btnp[5] = function() return {} end
  ret._interact = player_interact

  return ret
end

function update_player(a)
  if (not active(a)) return

  -- handle button input
  local next_state = {}
  local acted = false
  for i=0,5 do
    if (btnp(i)) then
      next_state = merge_tables(next_state, a._btnp[i](a))
    end
  end

  if next_state.pos != nil then
    for hdl in all(enemies) do
      local e = get_agent(hdl)
      local d = l1_distance(next_state.pos, e.pos)
      printh(hdl..' d='..d)
      if d < 1 then
        a._interact(a, e)
        acted = true
      end
    end

    -- handle turn
    if (next_state.pos[1] != a.pos[1] or next_state.pos[2] != a.pos[2]) then
      printh("player passing")
      acted = true
    end
  end

  if (acted) pass(a)
  a = merge_tables(a, next_state)
end

--[[
 Runs on agents when the player moves into the space.
]]
function player_interact(player, other)
  -- become the enemy!
  player.ani = other.ani
  player.rate = other.rate
  player.f = 1
  remove_agent(other.name)
  remove_mob(other)
end

function draw_player(a)
  rectfill(a.pos[1] * 8, a.pos[2] * 8, a.pos[1] * 8 + 8, a.pos[2] * 8 + 8, 7)
  draw_mob(a)
end

function draw_mob(a)
  if a.rate > 0 then
    a.frame = ((_t \ a.rate) % #a.ani) + 1
  end
  spr(a.ani[a.frame], a.pos[1] * 8, a.pos[2] * 8)
end

function move_entity(dir)
  local dx = 0
  local dy = 0
  if (dir == 0) dx = -1
  if (dir == 1) dx = 1
  if (dir == 2) dy = -1
  if (dir == 3) dy = 1

  return function(a) 
    local ret = {mid(0, a.pos[1] + dx, 15), mid(0, a.pos[2] + dy, 15)}

    -- handle collision
    if get_flag_at(ret, SOLID) then
      return a
    end

    return {pos=ret}
  end
end

-->8
-- enemy code

-- slimes: green, small, simple!
function create_slime(args)
  local ret = create_mob(args)
  ret.ani = {32, 33, 34, 34}
  ret.rate = 5

  return ret
end

function update_slime(a)
  if (not active(a)) return


  local _player_pos = get_agent(p_hdl).pos

  if l1_distance(a.pos, _player_pos) < 5 then
    local d = distances(_player_pos)
    local next_pos = a.pos
    local best_dist = d[next_pos[1] * 16 + next_pos[2]]
    for v in all(neighbors4(a.pos)) do
      dv = d[v[1] * 16 + v[2]]
      if dv < best_dist then
        next_pos = v
        best_dist = dv
      end
    end
    a.pos = next_pos
  end
  printh(a.pos[1]..','..a.pos[2])

  pass(a)
end

-->8
-- map code

-- sprite flag constants
SOLID = 0

function create_map(args)
  local ret = {x=0, y=0, w=16, h=16}
  return merge_tables(ret, args)
end

function update_map(a)
end

function draw_map(a)
  map(a.x, a.y, 0, 0, a.w, a.h)
end

function get_flag_at(pos, ...)
  return fget(mget(pos[1], pos[2]), ...)
end

--[[
 computes the distance from every cell to pos
]]
function distances(pos)
  local res = {}
  local q = {{pos[1], pos[2], 0}}
  local h = 1
  while h <= #q do
    local v = q[h]
    h += 1
    local idx = v[1] * 16 + v[2]
    if (res[idx] == nil) or (v[3] < res[idx]) then
      res[idx] = v[3]
      for u in all(neighbors4(v)) do
        add(q, {u[1], u[2], v[3] + 1})
      end
    end
  end
  return res
end

function neighbors4(x, y)
  local _x, _y = x, y
  if _y == nil then
    _x, _y = x[1], x[2]
  end
  local res = {{_x, _y+1}, {_x, _y-1}, {_x+1, _y}, {_x-1, _y}}
  for v in all(res) do
    if (get_flag_at(v, SOLID)) del(res, v)
    if (v[1] < 0 or v[1] > 15 or v[2] < 0 or v[2] > 15) del(res, v)
  end
  return res
end

function draw_distances(pos)
  local d = distances(pos)
  for _x=0,15 do
    for _y=0,15 do
      local _d = d[_x * 16 + _y]
      if _d != nil then
        cursor(_x * 8, _y * 8)
        print(_d)
      end
    end
  end
end

-->8
-- util functions

function merge_tables(base, other)
  for k, v in pairs(other) do
    base[k] = v
  end
  return base
end

--[[
 Implements manhattan distance
]]
function l1_distance(pos1, pos2)
  return abs(pos2[1] - pos1[1]) + abs(pos2[2] - pos1[2])
end

__gfx__
00000000000000000000000000000000000000000000000075000077777777777555557775555577777755777705707777077077000000000000000000000000
00000000000000000000000000000000000000000000000075057077777755557777757777777577777557777705705775057075000000000000000000000000
00700700000000000000000000000000000000000000000075057077000000000000007700000077550000005705700000057075000000000000000000000000
00077000000000000000000000000000000000000002200075077077077775507777705777777057570775555507755777777075000000000000000000000000
00077000000000000000000000000000000000000002200077077057055777707557705575577055570777777507777755577075000000000000000000000000
00700700000000000000000000000000000000000000000077075057000000000007507500075075570750007700000000000055000000000000000000000000
00000000000000000000000000000000000000000000000077075057555577777507507775075077570750577757777777755777000000000000000000000000
00000000000000000000000000000000000000000000000077000057777777777707507777075077770770777755555777557777000000000000000000000000
22022022220220220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaa000000aaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2aa1aa0220aa1aa20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2aaaaa0220aaaaa20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aaaaa0000aaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20aaa002200aaa020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20000002200000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02202220022022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033300000000000000000000033300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00333300000333000003330000333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03232330003333000033330003323230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03232330032323300332323003323230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333330032323300332323003333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333330033333300333333003333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0a07070707070907070707070707070900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050505050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605070707070709050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605070707070c07070707070706050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050505050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0607070707050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050506050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050506050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050506050605050505050506050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050506050b0707070705070c050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0605050506050505050505050505050600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b07070707070707070707070707070c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
